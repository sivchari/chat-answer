// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/message.proto

package protoconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"

	proto "github.com/sivchari/chat-answer/proto/proto"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "api.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceSendMessageProcedure is the fully-qualified name of the MessageService's
	// SendMessage RPC.
	MessageServiceSendMessageProcedure = "/api.MessageService/SendMessage"
)

// MessageServiceClient is a client for the api.MessageService service.
type MessageServiceClient interface {
	SendMessage(context.Context, *connect_go.Request[proto.SendMessageRequest]) (*connect_go.Response[proto.SendMessageResponse], error)
}

// NewMessageServiceClient constructs a client for the api.MessageService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		sendMessage: connect_go.NewClient[proto.SendMessageRequest, proto.SendMessageResponse](
			httpClient,
			baseURL+MessageServiceSendMessageProcedure,
			opts...,
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	sendMessage *connect_go.Client[proto.SendMessageRequest, proto.SendMessageResponse]
}

// SendMessage calls api.MessageService.SendMessage.
func (c *messageServiceClient) SendMessage(ctx context.Context, req *connect_go.Request[proto.SendMessageRequest]) (*connect_go.Response[proto.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the api.MessageService service.
type MessageServiceHandler interface {
	SendMessage(context.Context, *connect_go.Request[proto.SendMessageRequest]) (*connect_go.Response[proto.SendMessageResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MessageServiceSendMessageProcedure, connect_go.NewUnaryHandler(
		MessageServiceSendMessageProcedure,
		svc.SendMessage,
		opts...,
	))
	return "/api.MessageService/", mux
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) SendMessage(context.Context, *connect_go.Request[proto.SendMessageRequest]) (*connect_go.Response[proto.SendMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.MessageService.SendMessage is not implemented"))
}
