// Code generated by MockGen. DO NOT EDIT.
// Source: slog.go

// Package mock_log is a generated GoMock package.
package mock_log

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// DebugCtx mocks base method.
func (m *MockHandler) DebugCtx(ctx context.Context, msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugCtx", varargs...)
}

// DebugCtx indicates an expected call of DebugCtx.
func (mr *MockHandlerMockRecorder) DebugCtx(ctx, msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugCtx", reflect.TypeOf((*MockHandler)(nil).DebugCtx), varargs...)
}

// ErrorCtx mocks base method.
func (m *MockHandler) ErrorCtx(ctx context.Context, msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorCtx", varargs...)
}

// ErrorCtx indicates an expected call of ErrorCtx.
func (mr *MockHandlerMockRecorder) ErrorCtx(ctx, msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCtx", reflect.TypeOf((*MockHandler)(nil).ErrorCtx), varargs...)
}

// InfoCtx mocks base method.
func (m *MockHandler) InfoCtx(ctx context.Context, msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoCtx", varargs...)
}

// InfoCtx indicates an expected call of InfoCtx.
func (mr *MockHandlerMockRecorder) InfoCtx(ctx, msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoCtx", reflect.TypeOf((*MockHandler)(nil).InfoCtx), varargs...)
}

// WarnCtx mocks base method.
func (m *MockHandler) WarnCtx(ctx context.Context, msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnCtx", varargs...)
}

// WarnCtx indicates an expected call of WarnCtx.
func (mr *MockHandlerMockRecorder) WarnCtx(ctx, msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnCtx", reflect.TypeOf((*MockHandler)(nil).WarnCtx), varargs...)
}
