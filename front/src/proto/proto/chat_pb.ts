// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/chat.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.CreateRoomRequest
 */
export class CreateRoomRequest extends Message$1<CreateRoomRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message api.CreateRoomResponse
 */
export class CreateRoomResponse extends Message$1<CreateRoomResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.CreateRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined, b: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined): boolean {
    return proto3.util.equals(CreateRoomResponse, a, b);
  }
}

/**
 * @generated from message api.GetRoomRequest
 */
export class GetRoomRequest extends Message$1<GetRoomRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomRequest | PlainMessage<GetRoomRequest> | undefined, b: GetRoomRequest | PlainMessage<GetRoomRequest> | undefined): boolean {
    return proto3.util.equals(GetRoomRequest, a, b);
  }
}

/**
 * @generated from message api.GetRoomResponse
 */
export class GetRoomResponse extends Message$1<GetRoomResponse> {
  /**
   * @generated from field: api.Room room = 1;
   */
  room?: Room;

  constructor(data?: PartialMessage<GetRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "message", T: Room },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomResponse | PlainMessage<GetRoomResponse> | undefined, b: GetRoomResponse | PlainMessage<GetRoomResponse> | undefined): boolean {
    return proto3.util.equals(GetRoomResponse, a, b);
  }
}

/**
 * @generated from message api.ListRoomResponse
 */
export class ListRoomResponse extends Message$1<ListRoomResponse> {
  /**
   * @generated from field: repeated api.Room rooms = 1;
   */
  rooms: Room[] = [];

  constructor(data?: PartialMessage<ListRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ListRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rooms", kind: "message", T: Room, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoomResponse {
    return new ListRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoomResponse {
    return new ListRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoomResponse {
    return new ListRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoomResponse | PlainMessage<ListRoomResponse> | undefined, b: ListRoomResponse | PlainMessage<ListRoomResponse> | undefined): boolean {
    return proto3.util.equals(ListRoomResponse, a, b);
  }
}

/**
 * @generated from message api.Room
 */
export class Room extends Message$1<Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {
    return new Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJsonString(jsonString, options);
  }

  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {
    return proto3.util.equals(Room, a, b);
  }
}

/**
 * @generated from message api.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string roomId = 1;
   */
  roomId = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roomId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message api.ListMessageRequest
 */
export class ListMessageRequest extends Message$1<ListMessageRequest> {
  /**
   * @generated from field: string roomId = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<ListMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ListMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roomId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessageRequest {
    return new ListMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessageRequest {
    return new ListMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessageRequest {
    return new ListMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessageRequest | PlainMessage<ListMessageRequest> | undefined, b: ListMessageRequest | PlainMessage<ListMessageRequest> | undefined): boolean {
    return proto3.util.equals(ListMessageRequest, a, b);
  }
}

/**
 * @generated from message api.ListMessageResponse
 */
export class ListMessageResponse extends Message$1<ListMessageResponse> {
  /**
   * @generated from field: repeated api.Message messages = 1;
   */
  messages: Message[] = [];

  constructor(data?: PartialMessage<ListMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ListMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessageResponse | PlainMessage<ListMessageResponse> | undefined, b: ListMessageResponse | PlainMessage<ListMessageResponse> | undefined): boolean {
    return proto3.util.equals(ListMessageResponse, a, b);
  }
}

/**
 * @generated from message api.ChatRequest
 */
export class ChatRequest extends Message$1<ChatRequest> {
  /**
   * @generated from field: api.Message message = 1;
   */
  message?: Message;

  constructor(data?: PartialMessage<ChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatRequest {
    return new ChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatRequest {
    return new ChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatRequest {
    return new ChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChatRequest | PlainMessage<ChatRequest> | undefined, b: ChatRequest | PlainMessage<ChatRequest> | undefined): boolean {
    return proto3.util.equals(ChatRequest, a, b);
  }
}

/**
 * @generated from message api.ChatResponse
 */
export class ChatResponse extends Message$1<ChatResponse> {
  /**
   * @generated from field: api.Message message = 1;
   */
  message?: Message;

  constructor(data?: PartialMessage<ChatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ChatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatResponse {
    return new ChatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatResponse {
    return new ChatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatResponse {
    return new ChatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChatResponse | PlainMessage<ChatResponse> | undefined, b: ChatResponse | PlainMessage<ChatResponse> | undefined): boolean {
    return proto3.util.equals(ChatResponse, a, b);
  }
}

/**
 * @generated from message api.JoinRoomRequest
 */
export class JoinRoomRequest extends Message$1<JoinRoomRequest> {
  /**
   * @generated from field: string roomId = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<JoinRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.JoinRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roomId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinRoomRequest {
    return new JoinRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinRoomRequest {
    return new JoinRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinRoomRequest {
    return new JoinRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinRoomRequest | PlainMessage<JoinRoomRequest> | undefined, b: JoinRoomRequest | PlainMessage<JoinRoomRequest> | undefined): boolean {
    return proto3.util.equals(JoinRoomRequest, a, b);
  }
}

/**
 * @generated from message api.JoinRoomResponse
 */
export class JoinRoomResponse extends Message$1<JoinRoomResponse> {
  /**
   * @generated from field: api.Message message = 1;
   */
  message?: Message;

  constructor(data?: PartialMessage<JoinRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.JoinRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinRoomResponse {
    return new JoinRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinRoomResponse {
    return new JoinRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinRoomResponse {
    return new JoinRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinRoomResponse | PlainMessage<JoinRoomResponse> | undefined, b: JoinRoomResponse | PlainMessage<JoinRoomResponse> | undefined): boolean {
    return proto3.util.equals(JoinRoomResponse, a, b);
  }
}

